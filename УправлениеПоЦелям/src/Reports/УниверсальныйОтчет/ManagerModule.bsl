#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВариантыОтчетов

// См. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов.
//
Процедура НастроитьВариантыОтчета(Настройки, НастройкиОтчета) Экспорт
	
	НастройкиОтчета.ОпределитьНастройкиФормы = Истина;

	МодульВариантыОтчетов = ОбщегоНазначения.ОбщийМодуль("ВариантыОтчетов");
	МодульВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, НастройкиОтчета, Ложь);
	
	НастройкиВарианта = МодульВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "Основной");
	НастройкиВарианта.Описание = НСтр("ru = 'Универсальный отчет по справочникам, документам, регистрам.'");
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекстЗапросаПоМетаданным(ПараметрыОтчета)
	МетаданныеИсточника = Метаданные[ПараметрыОтчета.ТипОбъектаМетаданных][ПараметрыОтчета.ИмяОбъектаМетаданных];
	
	ИмяИсточника = МетаданныеИсточника.ПолноеИмя();
	Если ЗначениеЗаполнено(ПараметрыОтчета.ИмяТаблицы) Тогда 
		ИмяИсточника = ИмяИсточника + "." + ПараметрыОтчета.ИмяТаблицы;
	КонецЕсли;
	
	ОтборИсточника = "";
	
	Если ПараметрыОтчета.ИмяТаблицы = "ОстаткиИОбороты"
		Или ПараметрыОтчета.ИмяТаблицы = "Обороты" Тогда
		ОтборИсточника = "({&НачалоПериода}, {&КонецПериода}, Авто)";
	ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "Остатки"
		Или ПараметрыОтчета.ИмяТаблицы = "СрезПоследних" Тогда
		ОтборИсточника = "({&КонецПериода},)";
	ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "СрезПервых" Тогда
		ОтборИсточника = "({&НачалоПериода},)";
	ИначеЕсли ПараметрыОтчета.ТипОбъектаМетаданных = "Документы" 
		Или ПараметрыОтчета.ТипОбъектаМетаданных = "Задачи"
		Или ПараметрыОтчета.ТипОбъектаМетаданных = "БизнесПроцессы" Тогда
		
		Если ЗначениеЗаполнено(ПараметрыОтчета.ИмяТаблицы)
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(МетаданныеИсточника, "ТабличныеЧасти")
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(МетаданныеИсточника.ТабличныеЧасти, ПараметрыОтчета.ИмяТаблицы) Тогда 
			ОтборИсточника = "
				|{ГДЕ
				|	(Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода)}";
		Иначе
			ОтборИсточника = "
				|{ГДЕ
				|	(Дата МЕЖДУ &НачалоПериода И &КонецПериода)}";
		КонецЕсли;
	ИначеЕсли ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыСведений"
		И МетаданныеИсточника.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
		ОтборИсточника = "
			|{ГДЕ
			|	(Период МЕЖДУ &НачалоПериода И &КонецПериода)}";
	ИначеЕсли ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыНакопления"
		Или ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыБухгалтерии" Тогда
		ОтборИсточника = "
			|{ГДЕ
			|	(Период МЕЖДУ &НачалоПериода И &КонецПериода)}";
	ИначеЕсли ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыРасчета" Тогда
		ОтборИсточника = "
			|{ГДЕ
			|	ПериодРегистрации МЕЖДУ &НачалоПериода И &КонецПериода}";
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	*
	|ИЗ
	|	[ИмяИсточника] [ОтборИсточника]
	|";
	ВыраженияТекстаЗапроса = Новый Структура;
	ВыраженияТекстаЗапроса.Вставить("ИмяИсточника", ИмяИсточника);
	ВыраженияТекстаЗапроса.Вставить("ОтборИсточника", ОтборИсточника);
	
	Возврат СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстЗапроса, ВыраженияТекстаЗапроса);
КонецФункции

Функция ДоступныеТипыОбъектовМетаданных() Экспорт
	
	ЗначенияДляВыбора = Новый СписокЗначений;
	
	Если ЕстьОбъектыТипаМетаданных(Метаданные.Документы) Тогда
		ЗначенияДляВыбора.Добавить("Документы", НСтр("ru = 'Документ'"), , БиблиотекаКартинок.Документ);
	КонецЕсли;
	Если ЕстьОбъектыТипаМетаданных(Метаданные.Справочники) Тогда
		ЗначенияДляВыбора.Добавить("Справочники", НСтр("ru = 'Справочник'"), , БиблиотекаКартинок.Справочник);
	КонецЕсли;
	Если ЕстьОбъектыТипаМетаданных(Метаданные.РегистрыНакопления) Тогда
		ЗначенияДляВыбора.Добавить("РегистрыНакопления", НСтр("ru = 'Регистр накопления'"), , БиблиотекаКартинок.РегистрНакопления);
	КонецЕсли;
	Если ЕстьОбъектыТипаМетаданных(Метаданные.РегистрыСведений) Тогда
		ЗначенияДляВыбора.Добавить("РегистрыСведений", НСтр("ru = 'Регистр сведений'"), , БиблиотекаКартинок.РегистрСведений);
	КонецЕсли;
	Если ЕстьОбъектыТипаМетаданных(Метаданные.РегистрыБухгалтерии) Тогда
		ЗначенияДляВыбора.Добавить("РегистрыБухгалтерии", НСтр("ru = 'Регистр бухгалтерии'"), , БиблиотекаКартинок.РегистрБухгалтерии);
	КонецЕсли;
	Если ЕстьОбъектыТипаМетаданных(Метаданные.РегистрыРасчета) Тогда
		ЗначенияДляВыбора.Добавить("РегистрыРасчета", НСтр("ru = 'Регистр расчета'"), , БиблиотекаКартинок.РегистрРасчета);
	КонецЕсли;
	Если ЕстьОбъектыТипаМетаданных(Метаданные.ПланыВидовРасчета) Тогда
		ЗначенияДляВыбора.Добавить("ПланыВидовРасчета", НСтр("ru = 'Планы видов расчета'"), , БиблиотекаКартинок.ПланВидовРасчета);
	КонецЕсли;
	Если ЕстьОбъектыТипаМетаданных(Метаданные.БизнесПроцессы) Тогда
		ЗначенияДляВыбора.Добавить("БизнесПроцессы", НСтр("ru = 'Бизнес-процессы'"), , БиблиотекаКартинок.БизнесПроцесс);
	КонецЕсли;
	Если ЕстьОбъектыТипаМетаданных(Метаданные.Задачи) Тогда
		ЗначенияДляВыбора.Добавить("Задачи", НСтр("ru = 'Задачи'"), , БиблиотекаКартинок.Задача);
	КонецЕсли;
	
	Возврат ЗначенияДляВыбора;
	
КонецФункции

Функция ДоступныеОбъектыМетаданных(НастройкиКД, ТипОбъектаМетаданных = "") Экспорт
	
	ЗначенияДляВыбора = Новый СписокЗначений;
	УдаляемыеОбъекты  = Новый СписокЗначений;
	
	Если ПустаяСтрока(ТипОбъектаМетаданных) Тогда
		ПараметрыОтчета = НастройкиКД.ПараметрыДанных.Элементы;
		ПараметрТипОбъектаМетаданных = ПараметрыОтчета.Найти("ТипОбъектаМетаданных");
		ТипОбъектаМетаданных = ПараметрТипОбъектаМетаданных.Значение;
	КонецЕсли;
	Если ТипОбъектаМетаданных <> Неопределено И Не ПустаяСтрока(ТипОбъектаМетаданных) Тогда
		Для каждого Объект Из Метаданные[ТипОбъектаМетаданных] Цикл
			Если Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(Объект)
				Или Не ПравоДоступа("Чтение", Объект) Тогда
				Продолжить;
			КонецЕсли;
			Если НРег(Лев(Объект.Имя, 7)) = "удалить" Тогда
				УдаляемыеОбъекты.Добавить(Объект.Имя, Объект.Синоним);
			Иначе
				ЗначенияДляВыбора.Добавить(Объект.Имя, Объект.Синоним);
			КонецЕсли;
		КонецЦикла;
		ЗначенияДляВыбора.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
		УдаляемыеОбъекты.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
		
		Для Каждого УдаляемыйОбъект Из УдаляемыеОбъекты Цикл
			ЗначенияДляВыбора.Добавить(УдаляемыйОбъект.Значение, УдаляемыйОбъект.Представление);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ЗначенияДляВыбора;
	
КонецФункции

Функция ДоступныеТаблицы(НастройкиКД, ТипОбъектаМетаданных = "", ИмяОбъектаМетаданных = "") Экспорт
	
	ЗначенияДляВыбора = Новый СписокЗначений;
	
	ЭтоЗагруженнаяСхема = НастройкиКД.ДополнительныеСвойства.Свойство("СхемаКомпоновкиДанных");
	
	ПараметрыОтчета = НастройкиКД.ПараметрыДанных.Элементы;
	ПараметрИсточникДанных = ПараметрыОтчета.Найти("ИсточникДанных");
	ПараметрТипОбъектаМетаданных = ПараметрыОтчета.Найти("ТипОбъектаМетаданных");
	ПараметрИмяОбъектаМетаданных = ПараметрыОтчета.Найти("ИмяОбъектаМетаданных");
	
	Если ПустаяСтрока(ТипОбъектаМетаданных) Тогда
		ТипОбъектаМетаданных = ПараметрТипОбъектаМетаданных.Значение;
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяОбъектаМетаданных) Тогда
		ИмяОбъектаМетаданных = ПараметрИмяОбъектаМетаданных.Значение;
	КонецЕсли;
	
	Если (НЕ ЗначениеЗаполнено(ТипОбъектаМетаданных) 
		ИЛИ НЕ ЗначениеЗаполнено(ИмяОбъектаМетаданных))
		И НЕ НастройкиКД.ДополнительныеСвойства.Свойство("СхемаКомпоновкиДанных") Тогда
		Возврат ЗначенияДляВыбора;
	КонецЕсли;
	
	ЗначенияДляВыбора.Добавить("", НСтр("ru = 'Основные данные'"));
	Если ТипОбъектаМетаданных = "Документы" 
		ИЛИ ТипОбъектаМетаданных = "Задачи"
		ИЛИ ТипОбъектаМетаданных = "БизнесПроцессы"
		ИЛИ ТипОбъектаМетаданных = "Справочники" Тогда
		Для каждого ТабличнаяЧасть Из Метаданные[ТипОбъектаМетаданных][ИмяОбъектаМетаданных].ТабличныеЧасти Цикл
			ЗначенияДляВыбора.Добавить(ТабличнаяЧасть.Имя, ТабличнаяЧасть.Синоним);
		КонецЦикла;
	ИначеЕсли ТипОбъектаМетаданных = "РегистрыНакопления" Тогда
		Если Метаданные[ТипОбъектаМетаданных][ИмяОбъектаМетаданных].ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
			ЗначенияДляВыбора.Добавить("ОстаткиИОбороты", НСтр("ru = 'Остатки и обороты'"));
		Иначе
			ЗначенияДляВыбора.Добавить("Обороты", НСтр("ru = 'Обороты'"));
		КонецЕсли;
	ИначеЕсли ТипОбъектаМетаданных = "РегистрыСведений" Тогда 
		Если Метаданные[ТипОбъектаМетаданных][ИмяОбъектаМетаданных].ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
		Иначе
			ЗначенияДляВыбора.Добавить("СрезПоследних", НСтр("ru = 'Срез последних'"));
			ЗначенияДляВыбора.Добавить("СрезПервых",    НСтр("ru = 'Срез первых'"));
		КонецЕсли;
	ИначеЕсли ТипОбъектаМетаданных = "РегистрыРасчета" Тогда 
		Если Метаданные[ТипОбъектаМетаданных][ИмяОбъектаМетаданных].ПериодДействия Тогда
			ЗначенияДляВыбора.Добавить("ДанныеГрафика",             НСтр("ru = 'Данные графика'"));
			ЗначенияДляВыбора.Добавить("ФактическийПериодДействия", НСтр("ru = 'Фактический период действия'"));
		КонецЕсли;
	ИначеЕсли ТипОбъектаМетаданных = "ПланыВидовРасчета" Тогда
		ОбъектМетаданных = Метаданные[ТипОбъектаМетаданных][ИмяОбъектаМетаданных];
		Если ОбъектМетаданных.ЗависимостьОтВидовРасчета
			<> Метаданные.СвойстваОбъектов.ИспользованиеБазыПланаВидовРасчета.НеИспользовать Тогда 
			
			ЗначенияДляВыбора.Добавить("БазовыеВидыРасчета", НСтр("ru = 'Базовые виды расчета'"));
		КонецЕсли;
		
		ЗначенияДляВыбора.Добавить("ВедущиеВидыРасчета", НСтр("ru = 'Ведущие виды расчета'"));
		
		Если ОбъектМетаданных.ИспользованиеПериодаДействия Тогда 
			ЗначенияДляВыбора.Добавить("ВытесняющиеВидыРасчета", НСтр("ru = 'Вытесняющие виды расчета'"));
		КонецЕсли;
	ИначеЕсли ТипОбъектаМетаданных = "РегистрыБухгалтерии" Тогда
		ЗначенияДляВыбора.Добавить("ОстаткиИОбороты",   НСтр("ru = 'Остатки и обороты'"));
		ЗначенияДляВыбора.Добавить("Остатки",           НСтр("ru = 'Остатки'"));
		ЗначенияДляВыбора.Добавить("Обороты",           НСтр("ru = 'Обороты'"));
		ЗначенияДляВыбора.Добавить("ОборотыДтКт",       НСтр("ru = 'Обороты Дт/Кт'"));
		ЗначенияДляВыбора.Добавить("ДвиженияССубконто", НСтр("ru = 'Движения с субконто'"));
	ИначеЕсли ЭтоЗагруженнаяСхема Тогда
		ЗначенияДляВыбора.Очистить();
	КонецЕсли;
	
	Возврат ЗначенияДляВыбора;
	
КонецФункции

Функция ЕстьОбъектыТипаМетаданных(ТипМетаданных)
	
	Для каждого Объект Из ТипМетаданных Цикл
		Если ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(Объект)
			И ПравоДоступа("Чтение", Объект) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ТипОбъектаМетаданныхПоУмолчанию()
	
	ЗначенияДляВыбора = ДоступныеТипыОбъектовМетаданных();
	
	Если ЗначенияДляВыбора.НайтиПоЗначению("РегистрыНакопления") <> Неопределено Тогда
		Возврат "РегистрыНакопления";
	Иначе
		Возврат ЗначенияДляВыбора[0].Значение;
	КонецЕсли;
	
КонецФункции

Функция ИмяОбъектаМетаданныхПоУмолчанию(НастройкиКД, ТипОбъектаМетаданных)
	
	ЗначенияДляВыбора = ДоступныеОбъектыМетаданных(НастройкиКД, ТипОбъектаМетаданных);
	
	ЭтоЗагруженнаяСхема = НастройкиКД.ДополнительныеСвойства.Свойство("СхемаКомпоновкиДанных");
	Если Не ЭтоЗагруженнаяСхема И ЗначенияДляВыбора.Количество() > 0 Тогда
		ЗначениеПоУмолчанию = ЗначенияДляВыбора[0].Значение;
	КонецЕсли;
	
	Возврат ЗначениеПоУмолчанию;
	
КонецФункции

Функция ИмяТаблицыПоУмолчанию(НастройкиКД, ТипОбъектаМетаданных, ИмяОбъектаМетаданных)
	
	ЗначенияДляВыбора = ДоступныеТаблицы(НастройкиКД, ТипОбъектаМетаданных, ИмяОбъектаМетаданных);
	
	ЭтоЗагруженнаяСхема = НастройкиКД.ДополнительныеСвойства.Свойство("СхемаКомпоновкиДанных");
	Если Не ЭтоЗагруженнаяСхема И ЗначенияДляВыбора.Количество() > 0 Тогда
		ЗначениеПоУмолчанию = ЗначенияДляВыбора[0].Значение;
	КонецЕсли;
	
	Возврат ЗначениеПоУмолчанию;
	
КонецФункции

Процедура ДобавитьИтоги(ПараметрыОтчета, СхемаКомпоновкиДанных)
	
	Если ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыНакопления" 
		ИЛИ ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыСведений" 
		ИЛИ ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыБухгалтерии" 
		ИЛИ ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыРасчета" Тогда
		
		ДобавитьИтогиРегистра(ПараметрыОтчета, СхемаКомпоновкиДанных);
		
	ИначеЕсли ПараметрыОтчета.ТипОбъектаМетаданных = "Документы" 
		ИЛИ ПараметрыОтчета.ТипОбъектаМетаданных = "Справочники" 
		ИЛИ ПараметрыОтчета.ТипОбъектаМетаданных = "БизнесПроцессы"
		ИЛИ ПараметрыОтчета.ТипОбъектаМетаданных = "Задачи" Тогда
		
		ДобавитьИтогиОбъекта(ПараметрыОтчета, СхемаКомпоновкиДанных);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьИтогиОбъекта(Знач ПараметрыОтчета, Знач СхемаКомпоновкиДанных)
	
	ОбъектМетаданных = Метаданные[ПараметрыОтчета.ТипОбъектаМетаданных][ПараметрыОтчета.ИмяОбъектаМетаданных];
	Если ПараметрыОтчета.ИмяТаблицы <> "" Тогда
		ТабличнаяЧасть = ОбъектМетаданных.ТабличныеЧасти.Найти(ПараметрыОтчета.ИмяТаблицы);
		Если ТабличнаяЧасть <> Неопределено Тогда 
			ОбъектМетаданных = ТабличнаяЧасть;
		КонецЕсли;
	КонецЕсли;
	
	// Добавляем итоги по числовым реквизитам
	Для каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
		Если Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(Реквизит) Тогда 
			Продолжить;
		КонецЕсли;
		
		ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Реквизит.Имя, Реквизит.Синоним);
		Если Реквизит.Тип.СодержитТип(Тип("Число")) Тогда
			ДобавитьПолеИтога(СхемаКомпоновкиДанных, Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьИтогиРегистра(Знач ПараметрыОтчета, Знач СхемаКомпоновкиДанных)
	
	ОбъектМетаданных = Метаданные[ПараметрыОтчета.ТипОбъектаМетаданных][ПараметрыОтчета.ИмяОбъектаМетаданных]; 
	
	// Добавляем измерения
	Для каждого Измерение Из ОбъектМетаданных.Измерения Цикл
		Если ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(Измерение) Тогда 
			ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Измерение.Имя, Измерение.Синоним);
		КонецЕсли;
	КонецЦикла;
	
	// Добавляем реквизиты
	Если ПустаяСтрока(ПараметрыОтчета.ИмяТаблицы) Тогда
		Для каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
			Если ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(Реквизит) Тогда 
				ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Реквизит.Имя, Реквизит.Синоним);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Добавляем поля периода
	Если ПараметрыОтчета.ИмяТаблицы = "ОстаткиИОбороты" 
		ИЛИ ПараметрыОтчета.ИмяТаблицы = "Обороты" 
		ИЛИ ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыБухгалтерии" И ПараметрыОтчета.ИмяТаблицы = ""Тогда
		ДобавитьПоляПериодаВНаборДанных(СхемаКомпоновкиДанных.НаборыДанных[0]);
	КонецЕсли;
	
	// Для регистров бухгалтерии важна настройка ролей.
	Если ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыБухгалтерии" Тогда
		
		ПолеСчет = ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], "Счет", НСтр("ru = 'Счет'"));
		ПолеСчет.Роль.ВыражениеВидаСчета = "Счет.Вид";
		ПолеСчет.Роль.Счет = Истина;
		
		КоличествоСубконто = 0;
		Если ОбъектМетаданных.ПланСчетов <> Неопределено Тогда 
			КоличествоСубконто = ОбъектМетаданных.ПланСчетов.МаксКоличествоСубконто;
		КонецЕсли;
		
		Для НомерСубконто = 1 По КоличествоСубконто Цикл
			ПолеСубконто = ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], "Субконто" + НомерСубконто, НСтр("ru = 'Субконто'") + " " + НомерСубконто);
			ПолеСубконто.Роль.Измерение = Истина;
			ПолеСубконто.Роль.ИгнорироватьЗначенияNULL = Истина;
		КонецЦикла;
		
	КонецЕсли;
	
	// Добавляем ресурсы
	Для каждого Ресурс Из ОбъектМетаданных.Ресурсы Цикл
		Если Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(Ресурс) Тогда 
			Продолжить;
		КонецЕсли;
		
		Если ПараметрыОтчета.ИмяТаблицы = "Обороты" Тогда
			
			ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "Оборот", Ресурс.Синоним);
			ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "Оборот");
			
			Если ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыБухгалтерии" Тогда
				ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "ОборотДт", Ресурс.Синоним + " " + НСтр("ru = 'оборот Дт'"), Ресурс.Имя + "ОборотДт");
				ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "ОборотДт");
				ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "ОборотКт", Ресурс.Синоним + " " + НСтр("ru = 'оборот Кт'"), Ресурс.Имя + "ОборотКт");
				ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "ОборотКт");
				
				Если НЕ Ресурс.Балансовый Тогда
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "КорОборот", Ресурс.Синоним + " " + НСтр("ru = 'кор. оборот'"), Ресурс.Имя + "КорОборот");
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "КорОборот");
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "КорОборотДт", Ресурс.Синоним + " " + НСтр("ru = 'кор. оборот Дт'"), Ресурс.Имя + "КорОборотДт");
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "КорОборотДт");
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "КорОборотКт", Ресурс.Синоним + " " + НСтр("ru = 'кор. оборот Кт'"), Ресурс.Имя + "КорОборотКт");
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "КорОборотКт");
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "ОборотыДтКт" Тогда
			
			Если Ресурс.Балансовый Тогда
				ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "Оборот", Ресурс.Синоним);
				ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "Оборот");
			Иначе
				ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "ОборотДт", Ресурс.Синоним + " " + НСтр("ru = 'оборот Дт'"), Ресурс.Имя + "ОборотДт");
				ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "ОборотДт");
				ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "ОборотКт", Ресурс.Синоним + " " + НСтр("ru = 'оборот Кт'"), Ресурс.Имя + "ОборотКт");
				ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "ОборотКт");
			КонецЕсли;
			
		ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "ДвиженияССубконто" Тогда
			
			Если Ресурс.Балансовый Тогда
				ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя, Ресурс.Синоним);
				ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя);
			Иначе
				ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "Дт", Ресурс.Синоним + " " + НСтр("ru = 'Дт'"), Ресурс.Имя + "Дт");
				ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "Дт");
				ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "Кт", Ресурс.Синоним + " " + НСтр("ru = 'Кт'"), Ресурс.Имя + "Кт");
				ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "Кт");
			КонецЕсли;
			
		ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "ОстаткиИОбороты" Тогда
			
			ПолеНабора = ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "НачальныйОстаток", Ресурс.Синоним + " " + НСтр("ru = 'нач. остаток'"), Ресурс.Имя + "НачальныйОстаток");
			ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "НачальныйОстаток");
			
			Если ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыБухгалтерии" Тогда
				
				ПолеНабора.Роль.Остаток = Истина;
				ПолеНабора.Роль.ТипОстатка = ТипОстаткаКомпоновкиДанных.НачальныйОстаток;
				ПолеНабора.Роль.ГруппаОстатка = "Ост" + Ресурс.Имя;
				ПолеНабора.Роль.ПолеСчета = "Счет";
				
				ПолеНабора = ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "НачальныйОстатокДт", Ресурс.Синоним + " " + НСтр("ru = 'нач. остаток Дт'"), Ресурс.Имя + "НачальныйОстатокДт");
				ПолеНабора.Роль.Остаток = Истина;
				ПолеНабора.Роль.ТипОстатка = ТипОстаткаКомпоновкиДанных.НачальныйОстаток;
				ПолеНабора.Роль.ТипБухгалтерскогоОстатка = ТипБухгалтерскогоОстаткаКомпоновкиДанных.Дебет;
				ПолеНабора.Роль.ПолеСчета = "Счет";
				ПолеНабора.Роль.ГруппаОстатка = "Ост" + Ресурс.Имя;
				ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "НачальныйОстатокДт");
				
				ПолеНабора = ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "НачальныйОстатокКт", Ресурс.Синоним + " " + НСтр("ru = 'нач. остаток Кт'"), Ресурс.Имя + "НачальныйОстатокКт");
				ПолеНабора.Роль.Остаток = Истина;
				ПолеНабора.Роль.ТипОстатка = ТипОстаткаКомпоновкиДанных.НачальныйОстаток;
				ПолеНабора.Роль.ТипБухгалтерскогоОстатка = ТипБухгалтерскогоОстаткаКомпоновкиДанных.Кредит;
				ПолеНабора.Роль.ПолеСчета = "Счет";
				ПолеНабора.Роль.ГруппаОстатка = "Ост" + Ресурс.Имя;
				ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "НачальныйОстатокКт");
				
				ПолеНабора = ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "НачальныйРазвернутыйОстатокДт", Ресурс.Синоним + " " + НСтр("ru = 'нач. развернутый остаток Дт'"), Ресурс.Имя + "НачальныйРазвернутыйОстатокДт");
				ПолеНабора.Роль.Остаток = Истина;
				ПолеНабора.Роль.ТипОстатка = ТипОстаткаКомпоновкиДанных.НачальныйОстаток;
				ПолеНабора.Роль.ТипБухгалтерскогоОстатка = ТипБухгалтерскогоОстаткаКомпоновкиДанных.Нет;
				ПолеНабора.Роль.ПолеСчета = "Счет";
				ПолеНабора.Роль.ГруппаОстатка = "РазвОст" + Ресурс.Имя;
				ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "НачальныйРазвернутыйОстатокДт");
				
				ПолеНабора =ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "НачальныйРазвернутыйОстатокКт", Ресурс.Синоним + " " + НСтр("ru = 'нач. развернутый остаток Кт'"), Ресурс.Имя + "НачальныйРазвернутыйОстатокКт");
				ПолеНабора.Роль.Остаток = Истина;
				ПолеНабора.Роль.ТипОстатка = ТипОстаткаКомпоновкиДанных.НачальныйОстаток;
				ПолеНабора.Роль.ТипБухгалтерскогоОстатка = ТипБухгалтерскогоОстаткаКомпоновкиДанных.Нет;
				ПолеНабора.Роль.ПолеСчета = "Счет";
				ПолеНабора.Роль.ГруппаОстатка = "РазвОст" + Ресурс.Имя;
				ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "НачальныйРазвернутыйОстатокКт");
			КонецЕсли;
			
			ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "Оборот", Ресурс.Синоним + " " + НСтр("ru = 'оборот'"), Ресурс.Имя + "Оборот");
			ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "Оборот");
			
			Если ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыНакопления" Тогда
				ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "Приход", Ресурс.Синоним + " " + НСтр("ru = 'приход'"), Ресурс.Имя + "Приход");
				ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "Приход");
				
				ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "Расход", Ресурс.Синоним + " " + НСтр("ru = 'расход'"), Ресурс.Имя + "Расход");
				ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "Расход");
			ИначеЕсли ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыБухгалтерии" Тогда
				ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "ОборотДт", Ресурс.Синоним + " " + НСтр("ru = 'оборот Дт'"), Ресурс.Имя + "ОборотДт");
				ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "ОборотДт");
				
				ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "ОборотКт", Ресурс.Синоним + " " + НСтр("ru = 'оборот Кт'"), Ресурс.Имя + "ОборотКт");
				ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "ОборотКт");
			КонецЕсли;
			
			ПолеНабора = ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "КонечныйОстаток", Ресурс.Синоним + " " + НСтр("ru = 'кон. остаток'"), Ресурс.Имя + "КонечныйОстаток");
			ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "КонечныйОстаток");
			
			Если ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыБухгалтерии" Тогда
				
				ПолеНабора.Роль.Остаток = Истина;
				ПолеНабора.Роль.ТипОстатка = ТипОстаткаКомпоновкиДанных.КонечныйОстаток;
				ПолеНабора.Роль.ПолеСчета = "Счет";
				ПолеНабора.Роль.ГруппаОстатка = "Ост" + Ресурс.Имя;
				
				ПолеНабора = ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "КонечныйОстатокДт", Ресурс.Синоним + " " + НСтр("ru = 'кон. остаток Дт'"), Ресурс.Имя + "КонечныйОстатокДт");
				ПолеНабора.Роль.Остаток = Истина;
				ПолеНабора.Роль.ТипОстатка = ТипОстаткаКомпоновкиДанных.КонечныйОстаток;
				ПолеНабора.Роль.ТипБухгалтерскогоОстатка = ТипБухгалтерскогоОстаткаКомпоновкиДанных.Дебет;
				ПолеНабора.Роль.ПолеСчета = "Счет";
				ПолеНабора.Роль.ГруппаОстатка = "Ост" + Ресурс.Имя;
				ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "КонечныйОстатокДт");
				
				ПолеНабора = ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "КонечныйОстатокКт", Ресурс.Синоним + " " + НСтр("ru = 'кон. остаток Кт'"), Ресурс.Имя + "КонечныйОстатокКт");
				ПолеНабора.Роль.Остаток = Истина;
				ПолеНабора.Роль.ТипОстатка = ТипОстаткаКомпоновкиДанных.КонечныйОстаток;
				ПолеНабора.Роль.ТипБухгалтерскогоОстатка = ТипБухгалтерскогоОстаткаКомпоновкиДанных.Кредит;
				ПолеНабора.Роль.ПолеСчета = "Счет";
				ПолеНабора.Роль.ГруппаОстатка = "Ост" + Ресурс.Имя;
				ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "КонечныйОстатокКт");
				
				ПолеНабора = ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "КонечныйРазвернутыйОстатокДт", Ресурс.Синоним + " " + НСтр("ru = 'кон. развернутый остаток Дт'"), Ресурс.Имя + "КонечныйРазвернутыйОстатокДт");
				ПолеНабора.Роль.Остаток = Истина;
				ПолеНабора.Роль.ТипОстатка = ТипОстаткаКомпоновкиДанных.КонечныйОстаток;
				ПолеНабора.Роль.ТипБухгалтерскогоОстатка = ТипБухгалтерскогоОстаткаКомпоновкиДанных.Нет;
				ПолеНабора.Роль.ПолеСчета = "Счет";
				ПолеНабора.Роль.ГруппаОстатка = "РазвОст" + Ресурс.Имя;
				ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "КонечныйРазвернутыйОстатокДт");
				
				ПолеНабора = ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "КонечныйРазвернутыйОстатокКт", Ресурс.Синоним + " " + НСтр("ru = 'кон. развернутый остаток Кт'"), Ресурс.Имя + "КонечныйРазвернутыйОстатокКт");
				ПолеНабора.Роль.Остаток = Истина;
				ПолеНабора.Роль.ТипОстатка = ТипОстаткаКомпоновкиДанных.КонечныйОстаток;
				ПолеНабора.Роль.ТипБухгалтерскогоОстатка = ТипБухгалтерскогоОстаткаКомпоновкиДанных.Нет;
				ПолеНабора.Роль.ПолеСчета = "Счет";
				ПолеНабора.Роль.ГруппаОстатка = "РазвОст" + Ресурс.Имя;
				ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "КонечныйРазвернутыйОстатокКт");
			КонецЕсли;
			
		ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "Остатки" Тогда
			ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "Остаток", Ресурс.Синоним + " " + НСтр("ru = 'остаток'"), Ресурс.Имя + "Остаток");
			ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "Остаток");
			
			ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "ОстатокДт", Ресурс.Синоним + " " + НСтр("ru = 'остаток Дт'"), Ресурс.Имя + "ОстатокДт");
			ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "ОстатокДт");
			
			ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "ОстатокКт", Ресурс.Синоним + " " + НСтр("ru = 'остаток Кт'"), Ресурс.Имя + "ОстатокКт");
			ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "ОстатокКт");
			
			ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "РазвернутыйОстатокДт", Ресурс.Синоним + " " + НСтр("ru = 'развернутый остаток Дт'"), Ресурс.Имя + "РазвернутыйОстатокДт");
			ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "РазвернутыйОстатокДт");
			
			ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "РазвернутыйОстатокКт", Ресурс.Синоним + " " + НСтр("ru = 'развернутый остаток Кт'"), Ресурс.Имя + "РазвернутыйОстатокКт");
			ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "РазвернутыйОстатокКт");
			
		ИначеЕсли ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыСведений" Тогда
			
			ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя, Ресурс.Синоним);
			Если Ресурс.Тип.СодержитТип(Тип("Число")) Тогда
				ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя);
			КонецЕсли;
		ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "" Тогда
			
			Если ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыБухгалтерии" Тогда
				Если Ресурс.Балансовый Тогда
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя, Ресурс.Синоним);
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя);
				Иначе
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "Дт", Ресурс.Синоним + " " + НСтр("ru = 'Дт'"), Ресурс.Имя + "Дт");
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "Дт");
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "Кт", Ресурс.Синоним + " " + НСтр("ru = 'Кт'"), Ресурс.Имя + "Кт");
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "Кт");
				КонецЕсли;
			Иначе
				ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя, Ресурс.Синоним);
				ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция ДобавитьПоляПериодаВНаборДанных(НаборДанных)
	
	СписокПериодов = Новый СписокЗначений;
	СписокПериодов.Добавить("ПериодСекунда",   НСтр("ru = 'Период секунда'"));
	СписокПериодов.Добавить("ПериодМинута",    НСтр("ru = 'Период минута'"));
	СписокПериодов.Добавить("ПериодЧас",       НСтр("ru = 'Период час'"));
	СписокПериодов.Добавить("ПериодДень",      НСтр("ru = 'Период день'"));
	СписокПериодов.Добавить("ПериодНеделя",    НСтр("ru = 'Период неделя'"));
	СписокПериодов.Добавить("ПериодДекада",    НСтр("ru = 'Период декада'"));
	СписокПериодов.Добавить("ПериодМесяц",     НСтр("ru = 'Период месяц'"));
	СписокПериодов.Добавить("ПериодКвартал",   НСтр("ru = 'Период квартал'"));
	СписокПериодов.Добавить("ПериодПолугодие", НСтр("ru = 'Период полугодие'"));
	СписокПериодов.Добавить("ПериодГод",       НСтр("ru = 'Период год'"));
	
	ИмяПапки = "Периоды";
	СписокПолейНабораДанных = Новый СписокЗначений;
	ПапкаПолейНабораДанных = НаборДанных.Поля.Добавить(Тип("ПапкаПолейНабораДанныхСхемыКомпоновкиДанных"));
	ПапкаПолейНабораДанных.Заголовок   = ИмяПапки;
	ПапкаПолейНабораДанных.ПутьКДанным = ИмяПапки;
	
	ТипПериода = ТипПериодаКомпоновкиДанных.Основной;
	
	Для каждого Период Из СписокПериодов Цикл
		ПолеНабораДанных = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабораДанных.Поле        = Период.Значение;
		ПолеНабораДанных.Заголовок   = Период.Представление;
		ПолеНабораДанных.ПутьКДанным = ИмяПапки + "." + Период.Значение;
		ПолеНабораДанных.Роль.ТипПериода = ТипПериода;
		ПолеНабораДанных.Роль.НомерПериода = СписокПериодов.Индекс(Период);
		СписокПолейНабораДанных.Добавить(ПолеНабораДанных);
		ТипПериода = ТипПериодаКомпоновкиДанных.Дополнительный;
	КонецЦикла;
	
	Возврат СписокПолейНабораДанных;
	
КонецФункции

// Добавить поле в набор данных.
Функция ДобавитьПолеНабораДанных(НаборДанных, Поле, Заголовок, ПутьКДанным = Неопределено)
	
	Если ПутьКДанным = Неопределено Тогда
		ПутьКДанным = Поле;
	КонецЕсли;
	
	ПолеНабораДанных = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	ПолеНабораДанных.Поле        = Поле;
	ПолеНабораДанных.Заголовок   = Заголовок;
	ПолеНабораДанных.ПутьКДанным = ПутьКДанным;
	Возврат ПолеНабораДанных;
	
КонецФункции

// Добавить поле итога в схему компоновки данных. Если параметр Выражение не указан, используется Сумма(ПутьКДанным).
Функция ДобавитьПолеИтога(СхемаКомпоновкиДанных, ПутьКДанным, Выражение = Неопределено)
	
	Если Выражение = Неопределено Тогда
		Выражение = "Сумма(" + ПутьКДанным + ")";
	КонецЕсли;
	
	ПолеИтога = СхемаКомпоновкиДанных.ПоляИтога.Найти(ПутьКДанным);
	Если ПолеИтога = Неопределено Тогда 
		ПолеИтога = СхемаКомпоновкиДанных.ПоляИтога.Добавить();
		ПолеИтога.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
	ПолеИтога.Выражение = Выражение;
	Возврат ПолеИтога;
	
КонецФункции

Процедура ДобавитьПоказатели(ПараметрыОтчета, НастройкиКД)
	
	Если ПараметрыОтчета.ИмяТаблицы = "ОстаткиИОбороты" Тогда
		ВыбранныеПоляНачальныйОстаток = НастройкиКД.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ВыбранныеПоляНачальныйОстаток.Заголовок = НСтр("ru = 'Нач. остаток'");
		ВыбранныеПоляНачальныйОстаток.Расположение = РасположениеПоляКомпоновкиДанных.Горизонтально;
		Если ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыНакопления" Тогда
			ВыбранныеПоляПриход = НастройкиКД.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ВыбранныеПоляПриход.Заголовок = НСтр("ru = 'Приход'");
			ВыбранныеПоляПриход.Расположение = РасположениеПоляКомпоновкиДанных.Горизонтально;
			ВыбранныеПоляРасход = НастройкиКД.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ВыбранныеПоляРасход.Заголовок = НСтр("ru = 'Расход'");
			ВыбранныеПоляРасход.Расположение = РасположениеПоляКомпоновкиДанных.Горизонтально;
		ИначеЕсли ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыБухгалтерии" Тогда
			ВыбранныеПоляОбороты = НастройкиКД.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ВыбранныеПоляОбороты.Заголовок = НСтр("ru = 'Обороты'");
			ВыбранныеПоляОбороты.Расположение = РасположениеПоляКомпоновкиДанных.Горизонтально;
		КонецЕсли;
		ВыбранныеПоляКонечныйОстаток = НастройкиКД.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ВыбранныеПоляКонечныйОстаток.Заголовок = НСтр("ru = 'Кон. остаток'");
		ВыбранныеПоляКонечныйОстаток.Расположение = РасположениеПоляКомпоновкиДанных.Горизонтально;
	КонецЕсли;
	
	ОбъектМетаданных = Метаданные[ПараметрыОтчета.ТипОбъектаМетаданных][ПараметрыОтчета.ИмяОбъектаМетаданных];
	Если ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыНакопления" Тогда
		Для Каждого Измерение Из ОбъектМетаданных.Измерения Цикл
			Если Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(Измерение) Тогда 
				Продолжить;
			КонецЕсли;
			
			ВыбранныеПоля = НастройкиКД.Выбор;
			ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Измерение.Имя);
		КонецЦикла;
		Для Каждого Ресурс Из ОбъектМетаданных.Ресурсы Цикл
			Если Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(Ресурс) Тогда 
				Продолжить;
			КонецЕсли;
			
			ВыбранныеПоля = НастройкиКД.Выбор;
			Если ПараметрыОтчета.ИмяТаблицы = "Обороты" Тогда
				ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "Оборот");
			ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "ОстаткиИОбороты" Тогда
				ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоляНачальныйОстаток, Ресурс.Имя + "НачальныйОстаток", Ресурс.Синоним);
				ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоляПриход, Ресурс.Имя + "Приход", Ресурс.Синоним);
				ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоляРасход, Ресурс.Имя + "Расход", Ресурс.Синоним);
				ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоляКонечныйОстаток, Ресурс.Имя + "КонечныйОстаток", Ресурс.Синоним);
			ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "" Тогда
				ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыРасчета" Тогда
		Для Каждого Измерение Из ОбъектМетаданных.Измерения Цикл
			Если Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(Измерение) Тогда 
				Продолжить;
			КонецЕсли;
			
			ВыбранныеПоля = НастройкиКД.Выбор;
			ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Измерение.Имя);
		КонецЦикла;
		Для Каждого Ресурс Из ОбъектМетаданных.Ресурсы Цикл
			Если Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(Ресурс) Тогда 
				Продолжить;
			КонецЕсли;
			
			ВыбранныеПоля = НастройкиКД.Выбор;
			ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя);
		КонецЦикла;
	ИначеЕсли ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыСведений" Тогда
		Для Каждого Измерение Из ОбъектМетаданных.Измерения Цикл
			Если Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(Измерение) Тогда 
				Продолжить;
			КонецЕсли;
			
			ВыбранныеПоля = НастройкиКД.Выбор;
			ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Измерение.Имя);
		КонецЦикла;
		Для Каждого Ресурс Из ОбъектМетаданных.Ресурсы Цикл
			Если Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(Ресурс) Тогда 
				Продолжить;
			КонецЕсли;
			
			ВыбранныеПоля = НастройкиКД.Выбор;
			ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя);
		КонецЦикла;
	ИначеЕсли ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыБухгалтерии" Тогда
		Для Каждого Ресурс Из ОбъектМетаданных.Ресурсы Цикл
			Если Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(Ресурс) Тогда 
				Продолжить;
			КонецЕсли;
			
			ВыбранныеПоля = НастройкиКД.Выбор;
			Если ПараметрыОтчета.ИмяТаблицы = "Обороты" Тогда
				ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "ОборотДт", Ресурс.Синоним + " " + НСтр("ru = 'оборот Дт'"));
				ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "ОборотКт", Ресурс.Синоним + " " + НСтр("ru = 'оборот Кт'"));
			ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "ОборотыДтКт" Тогда
				Если Ресурс.Балансовый Тогда
					ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "Оборот", Ресурс.Синоним + " " + НСтр("ru = 'оборот'"));
				Иначе
					ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "ОборотДт", Ресурс.Синоним + " " + НСтр("ru = 'оборот Дт'"));
					ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "ОборотКт", Ресурс.Синоним + " " + НСтр("ru = 'оборот Кт'"));
				КонецЕсли;
			ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "Остатки" Тогда
				ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "ОстатокДт", Ресурс.Синоним + " " + НСтр("ru = 'ост. Дт'"));
				ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "ОстатокКт", Ресурс.Синоним + " " + НСтр("ru = 'ост. Кт'"));
			ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "ОстаткиИОбороты" Тогда
				ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоляНачальныйОстаток, Ресурс.Имя + "НачальныйОстатокДт", Ресурс.Синоним + " " + НСтр("ru = 'нач. ост. Дт'"));
				ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоляНачальныйОстаток, Ресурс.Имя + "НачальныйОстатокКт", Ресурс.Синоним + " " + НСтр("ru = 'нач. ост. Кт'"));
				ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоляОбороты, Ресурс.Имя + "ОборотДт", Ресурс.Синоним + " " + НСтр("ru = 'оборот Дт'"));
				ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоляОбороты, Ресурс.Имя + "ОборотКт", Ресурс.Синоним + " " + НСтр("ru = 'оборот Кт'"));
				ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоляКонечныйОстаток, Ресурс.Имя + "КонечныйОстатокДт", " " + Ресурс.Синоним + НСтр("ru = 'кон. ост. Дт'"));
				ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоляКонечныйОстаток, Ресурс.Имя + "КонечныйОстатокКт", " " + Ресурс.Синоним + НСтр("ru = 'кон. ост. Кт'"));
			ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "ДвиженияССубконто" Тогда
				Если Ресурс.Балансовый Тогда
					ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя, Ресурс.Синоним);
				Иначе
					ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "Дт", Ресурс.Синоним + " " + НСтр("ru = 'Дт'"));
					ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "Кт", Ресурс.Синоним + " " + НСтр("ru = 'Кт'"));
				КонецЕсли;
			ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "" Тогда
				Если Ресурс.Балансовый Тогда
					ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя, Ресурс.Синоним);
				Иначе
					ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "Дт", Ресурс.Синоним + " " + НСтр("ru = 'Дт'"));
					ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "Кт", Ресурс.Синоним + " " + НСтр("ru = 'Кт'"));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ПараметрыОтчета.ТипОбъектаМетаданных = "Документы" 
		ИЛИ ПараметрыОтчета.ТипОбъектаМетаданных = "Задачи"
		ИЛИ ПараметрыОтчета.ТипОбъектаМетаданных = "БизнесПроцессы"
		ИЛИ ПараметрыОтчета.ТипОбъектаМетаданных = "Справочники" Тогда
		Если ПараметрыОтчета.ИмяТаблицы <> "" Тогда
			ОбъектМетаданных = ОбъектМетаданных.ТабличныеЧасти[ПараметрыОтчета.ИмяТаблицы];
		КонецЕсли;
		ВыбранныеПоля = НастройкиКД.Выбор;
		ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, "Ссылка");
		Для каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
			Если ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(Реквизит) Тогда 
				ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Реквизит.Имя);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ПараметрыОтчета.ТипОбъектаМетаданных = "ПланыВидовРасчета" Тогда
		Если ПараметрыОтчета.ИмяТаблицы = "" Тогда
			Для каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
				Если Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(Реквизит) Тогда 
					Продолжить;
				КонецЕсли;
				
				ВыбранныеПоля = НастройкиКД.Выбор;
				ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Реквизит.Имя);
			КонецЦикла;
		Иначе
			Для каждого Реквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
				ВыбранныеПоля = НастройкиКД.Выбор;
				ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Реквизит.Имя);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Формирует структуру настроек компоновки данных
//
// Параметры:
//  ПараметрыОтчета - Структура - описание объекта метаданных - источника данных
//  Схема - СхемаКомпоновкиДанных - основная схема компоновки данных отчета
//  Настройки - НастройкиКомпоновкиДанных - настройки, чья структура формируется.
//
Процедура СформироватьСтруктуру(ПараметрыОтчета, Схема, Настройки)
	Настройки.Структура.Очистить();
	
	Структура = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	
	ТипыПолей = СтрРазделить("Измерения@Ресурсы", "@", Ложь);
	
	ТипыПолейИсточников = Новый Соответствие();
	ТипыПолейИсточников.Вставить("РегистрыСведений", ТипыПолей);
	ТипыПолейИсточников.Вставить("РегистрыНакопления", ТипыПолей);
	ТипыПолейИсточников.Вставить("РегистрыБухгалтерии", ТипыПолей);
	ТипыПолейИсточников.Вставить("РегистрыРасчета", ТипыПолей);
	
	ТипыПолейИсточника = ТипыПолейИсточников[ПараметрыОтчета.ТипОбъектаМетаданных];
	Если ТипыПолейИсточника <> Неопределено Тогда 
		УточнятьСуффиксыПолей = ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыБухгалтерии"
			И (ПараметрыОтчета.ИмяТаблицы = ""
				Или ПараметрыОтчета.ИмяТаблицы = "ОборотыДтКт"
				Или ПараметрыОтчета.ИмяТаблицы = "ДвиженияССубконто");
		
		Для Каждого ТипПолейИсточника Из ТипыПолейИсточника Цикл 
			ПоляГруппировки = Структура.ПоляГруппировки.Элементы;
			
			МетаданныеИсточника = Метаданные[ПараметрыОтчета.ТипОбъектаМетаданных][ПараметрыОтчета.ИмяОбъектаМетаданных];
			Для Каждого МетаданныеПоля Из МетаданныеИсточника[ТипПолейИсточника] Цикл
				Если Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(МетаданныеПоля) Тогда 
					Продолжить;
				КонецЕсли;
				
				Если ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыБухгалтерии"
					И МетаданныеПоля.ПризнакУчета <> Неопределено Тогда 
					Продолжить;
				КонецЕсли;
				
				Если ТипПолейИсточника = "Ресурсы"
					И МетаданныеПоля.Тип.СодержитТип(Тип("Число")) Тогда 
					Продолжить;
				КонецЕсли;
				
				Если УточнятьСуффиксыПолей
					И Не МетаданныеПоля.Балансовый Тогда 
					СуффиксыПолей = СтрРазделить("Дт@Кт", "@", Ложь);
				Иначе
					СуффиксыПолей = СтрРазделить("", "@");
				КонецЕсли;
				
				Для Каждого Суффикс Из СуффиксыПолей Цикл 
					ПолеГруппировки = ПоляГруппировки.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
					ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных(МетаданныеПоля.Имя + Суффикс);
					ПолеГруппировки.Использование = Истина;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с типовой схемой, настраиваемой в пользовательских настройках.

Функция ПараметрыОтчета(Настройки, ПользовательскиеНастройки) Экспорт
	ПараметрыОтчета = Новый Структура(
		"Период, ИсточникДанных, ТипОбъектаМетаданных, ПолноеИмяОбъектаМетаданных, ИмяОбъектаМетаданных, ИмяТаблицы");
	ПараметрыОтчета.Вставить("ОчиститьСтруктуру", Ложь);
	
	ПолучитьПараметрыИзПользовательскихНастроек(ПараметрыОтчета, ПользовательскиеНастройки, Настройки.ДополнительныеСвойства);
	ПолучитьПараметрыИзНастроек(ПараметрыОтчета, Настройки);
	
	// Если в настройках варианта хранится параметр с неактуальным именем - выполнится его актуализация.
	ПараметрыОтчета.Удалить("ПолноеИмяОбъектаМетаданных");
	
	ПараметрыДанных = Настройки.ПараметрыДанных.Элементы;
	НеактуальныйПараметр = ПараметрыДанных.Найти("ПолноеИмяОбъектаМетаданных");
	Если НеактуальныйПараметр <> Неопределено Тогда 
		ПараметрыДанных.Удалить(НеактуальныйПараметр);
	КонецЕсли;
	
	ПривестиКИсточникуДанных(ПараметрыОтчета, Настройки);
	
	// Заполнение значениями по умолчанию.
	Если Не ЗначениеЗаполнено(ПараметрыОтчета.ТипОбъектаМетаданных) Тогда
		ПараметрыОтчета.ТипОбъектаМетаданных = ТипОбъектаМетаданныхПоУмолчанию();
		ПараметрыОтчета.ОчиститьСтруктуру = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыОтчета.ИмяОбъектаМетаданных) Тогда
		ПараметрыОтчета.ИмяОбъектаМетаданных = ИмяОбъектаМетаданныхПоУмолчанию(
			Настройки, ПараметрыОтчета.ТипОбъектаМетаданных);
		ПараметрыОтчета.ОчиститьСтруктуру = Истина;
	КонецЕсли;
	
	Если ПараметрыОтчета.ОчиститьСтруктуру Тогда 
		ПривестиКИсточникуДанных(ПараметрыОтчета, Настройки);
	КонецЕсли;
	
	ДоступныеТаблицы = ДоступныеТаблицы(
		Настройки, ПараметрыОтчета.ТипОбъектаМетаданных, ПараметрыОтчета.ИмяОбъектаМетаданных);
	
	Если ПараметрыОтчета.ИмяТаблицы = Неопределено
		Или ДоступныеТаблицы.НайтиПоЗначению(ПараметрыОтчета.ИмяТаблицы) = Неопределено Тогда
		ПараметрыОтчета.ИмяТаблицы = ИмяТаблицыПоУмолчанию(
			Настройки, ПараметрыОтчета.ТипОбъектаМетаданных, ПараметрыОтчета.ИмяОбъектаМетаданных);
		ПараметрыОтчета.ОчиститьСтруктуру = Истина;
	КонецЕсли;
	
	Возврат ПараметрыОтчета;
КонецФункции

// Получает параметры, влияющие на построение запроса набора данных СКД из пользовательских настроек.
//
// Параметры:
//  Параметры - Структура - см. ПараметрыОтчета()
//  Настройки - ПользовательскиеНастройкиКомпоновкиДанных - текущие пользовательские настройки компоновки данных.
//
Процедура ПолучитьПараметрыИзПользовательскихНастроек(Параметры, Настройки, ДополнительныеСвойства)
	Если Не ДополнительныеСвойства.Свойство("ОтчетИнициализирован")
		Или ТипЗнч(Настройки) <> Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементНастройки Из Настройки.Элементы Цикл
		Если ТипЗнч(ЭлементНастройки) <> Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПараметра = Строка(ЭлементНастройки.Параметр);
		Если Параметры.Свойство(ИмяПараметра)
			И Параметры[ИмяПараметра] = Неопределено Тогда 
			Параметры[ИмяПараметра] = ЭлементНастройки.Значение;
		КонецЕсли;
	КонецЦикла;
	
	// Если в настройках варианта хранится параметр с неактуальным именем - выполнится его актуализация.
	Если ЗначениеЗаполнено(Параметры.ПолноеИмяОбъектаМетаданных)
		И Не ЗначениеЗаполнено(Параметры.ИмяОбъектаМетаданных) Тогда 
		Параметры.ИмяОбъектаМетаданных = Параметры.ПолноеИмяОбъектаМетаданных;
	КонецЕсли;
КонецПроцедуры

// Получает параметры, влияющие на построение запроса набора данных СКД из настроек.
//
// Параметры:
//  Параметры - Структура - см. ПараметрыОтчета()
//  Настройки - НастройкиКомпоновкиДанных - текущие настройки компоновки данных.
//
Процедура ПолучитьПараметрыИзНастроек(Параметры, Настройки)
	ПараметрыДанных = Настройки.ПараметрыДанных.Элементы;
	
	Для Каждого Параметр Из Параметры Цикл 
		ЭлементНастройки = ПараметрыДанных.Найти(Параметр.Ключ);
		Если ЭлементНастройки = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		Если Параметр.Значение = Неопределено Тогда 
			Параметры[Параметр.Ключ] = ЭлементНастройки.Значение;
		ИначеЕсли ЭлементНастройки.Значение <> Параметр.Значение Тогда 
			ЭлементНастройки.Значение = Параметр.Значение;
			Настройки.ДополнительныеСвойства.Вставить("ОтчетИнициализирован", Ложь);
		КонецЕсли;
	КонецЦикла;
	
	// Если в настройках варианта хранится параметр с неактуальным именем - выполнится его актуализация.
	Если ЗначениеЗаполнено(Параметры.ПолноеИмяОбъектаМетаданных)
		И Не ЗначениеЗаполнено(Параметры.ИмяОбъектаМетаданных) Тогда 
		Параметры.ИмяОбъектаМетаданных = Параметры.ПолноеИмяОбъектаМетаданных;
	КонецЕсли;
КонецПроцедуры

// Устанавливает соответствие параметров ТипОбъектаМетаданных, ИмяОбъектаМетаданных
//  с параметром ИсточникДанных.
//
// Параметры:
//  Параметры - Структура - см. ПараметрыОтчета()
//  Настройки - НастройкиКомпоновкиДанных - текущие настройки компоновки данных.
//
Процедура ПривестиКИсточникуДанных(Параметры, Настройки)
	Если Не ЗначениеЗаполнено(Параметры.ТипОбъектаМетаданных)
		Или Не ЗначениеЗаполнено(Параметры.ИмяОбъектаМетаданных) Тогда 
		Возврат;
	КонецЕсли;
	
	ОбъектМетаданныхСуществует = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
		Метаданные[Параметры.ТипОбъектаМетаданных], Параметры.ИмяОбъектаМетаданных);
	
	Если ОбъектМетаданныхСуществует Тогда 
		Параметры.ИсточникДанных = ИсточникДанных(Параметры.ТипОбъектаМетаданных, Параметры.ИмяОбъектаМетаданных);
	ИначеЕсли ЗначениеЗаполнено(Параметры.ИсточникДанных) Тогда 
		ОбъектМетаданных = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(Параметры.ИсточникДанных);
		Параметры.ТипОбъектаМетаданных = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных);
		Параметры.ИмяОбъектаМетаданных = ОбъектМетаданных.Имя;
		Параметры.ИмяТаблицы = Неопределено;
	Иначе
		Параметры.ТипОбъектаМетаданных = Неопределено;
		Параметры.ИмяОбъектаМетаданных = Неопределено;
		Параметры.ИмяТаблицы = Неопределено;
	КонецЕсли;
	
	// Согласование со значением параметра данных.
	ПараметрыДанных = Настройки.ПараметрыДанных;
	
	ЭлементНастройки = ПараметрыДанных.Элементы.Найти("ИсточникДанных");
	Если ЭлементНастройки = Неопределено Тогда 
		ЭлементНастройки = ПараметрыДанных.Элементы.Добавить();
		ЭлементНастройки.Параметр = Новый ПараметрКомпоновкиДанных("ИсточникДанных");
		ЭлементНастройки.Значение = Параметры.ИсточникДанных;
		ЭлементНастройки.Использование = Истина;
	Иначе
		ПараметрыДанных.УстановитьЗначениеПараметра("ИсточникДанных", Параметры.ИсточникДанных);
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьТиповуюСхему(ПараметрыОтчета, НастройкиКД, НовыеПользовательскиеНастройкиКД) Экспорт
	
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя = "НаборДанных1";
	НаборДанных.ИсточникДанных = ИсточникДанных.Имя;
	
	СхемаКомпоновкиДанных.ПоляИтога.Очистить();
	СхемаКомпоновкиДанных.НаборыДанных[0].Запрос = ТекстЗапросаПоМетаданным(ПараметрыОтчета);
	
	ДобавитьИтоги(ПараметрыОтчета, СхемаКомпоновкиДанных);
	
	// Параметр Период не выводится для справочников, планов видов расчета и непериодических регистров сведений.
	Если ПараметрыОтчета.ТипОбъектаМетаданных = "Справочники"
		Или ПараметрыОтчета.ТипОбъектаМетаданных = "ПланыВидовРасчета" 
		Или (ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыСведений"	
			И Метаданные[ПараметрыОтчета.ТипОбъектаМетаданных][ПараметрыОтчета.ИмяОбъектаМетаданных].ПериодичностьРегистраСведений 
			= Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический) Тогда
		СхемаКомпоновкиДанных.Параметры.Период.ОграничениеИспользования = Истина;
	КонецЕсли;
	
	ДоступныеТаблицы = ДоступныеТаблицы(НастройкиКД, ПараметрыОтчета.ТипОбъектаМетаданных, ПараметрыОтчета.ИмяОбъектаМетаданных);
	Если ДоступныеТаблицы.Количество() <= 1 Тогда
		СхемаКомпоновкиДанных.Параметры.ИмяТаблицы.ОграничениеИспользования = Истина;
	КонецЕсли;
	
	Возврат СхемаКомпоновкиДанных;
	
КонецФункции

Процедура НастройкиКДПоУмолчаниюТиповойСхемы(ОтчетОбъект, ПараметрыОтчета, НастройкиКД, НовыеПользовательскиеНастройкиКД) Экспорт
	
	Если Не НастройкиКД.ДополнительныеСвойства.Свойство("ОтчетИнициализирован")
		Или ((НастройкиКД.ДополнительныеСвойства.Свойство("ОтчетИнициализирован")
			И Не НастройкиКД.ДополнительныеСвойства.ОтчетИнициализирован))
		Или ПараметрыОтчета.ОчиститьСтруктуру Тогда
		
		СхемаКД = ОтчетОбъект.СхемаКомпоновкиДанных;
		ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКД.НастройкиПоУмолчанию);
		
		МакетОформления = МакетОформления(НастройкиКД);
		
		НастройкиКД = ОтчетОбъект.КомпоновщикНастроек.Настройки;
		
		НастройкиКД.Выбор.Элементы.Очистить();
		НастройкиКД.Структура.Очистить();
		
		ДобавитьПоказатели(ПараметрыОтчета, НастройкиКД);
		СформироватьСтруктуру(ПараметрыОтчета, СхемаКД, НастройкиКД);
		
		ПараметрыДанных = НастройкиКД.ПараметрыДанных.Элементы;
		Для Каждого ПараметрОтчета Из ПараметрыОтчета Цикл 
			ПараметрДанных = ПараметрыДанных.Найти(ПараметрОтчета.Ключ);
			Если ПараметрДанных <> Неопределено Тогда 
				ПараметрДанных.Значение = ПараметрОтчета.Значение;
			КонецЕсли;
		КонецЦикла;
		
		ВосстановитьМакетОформления(МакетОформления, НастройкиКД);
		
		НастройкиКД.ДополнительныеСвойства.Вставить("ОтчетИнициализирован", Истина);
	КонецЕсли;
	
КонецПроцедуры

Функция МакетОформления(Настройки)
	НайденныйПараметр = Настройки.ПараметрыВывода.Элементы.Найти("МакетОформления");
	Если НайденныйПараметр.Значение = "Main"
		Или НайденныйПараметр.Значение = "Основной" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат НайденныйПараметр.Значение;
КонецФункции

Процедура ВосстановитьМакетОформления(МакетОформления, Настройки)
	Если МакетОформления = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	НайденныйПараметр = Настройки.ПараметрыВывода.Элементы.Найти("МакетОформления");
	Если НайденныйПараметр.Значение = "Main"
		Или НайденныйПараметр.Значение = "Основной" Тогда
		
		НайденныйПараметр.Значение = МакетОформления;
		НайденныйПараметр.Использование = Истина;
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из Настройки.Структура Цикл
		Если ТипЗнч(ЭлементСтруктуры) <> Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		НайденныйПараметр = ЭлементСтруктуры.Настройки.ПараметрыВывода.Элементы.Найти("МакетОформления");
		Если НайденныйПараметр.Значение = "Main" 
			Или НайденныйПараметр.Значение = "Основной" Тогда
			
			НайденныйПараметр.Значение = МакетОформления;
			НайденныйПараметр.Использование = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с произвольной схемой из файла.

Функция ИзвлечьСхемуИзДвоичныхДанных(ЗагруженнаяСхема) Экспорт
	
	ПолноеИмяФайла = ПолучитьИмяВременногоФайла();
	ЗагруженнаяСхема.Записать(ПолноеИмяФайла);
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПолноеИмяФайла);
	СхемаКД = СериализаторXDTO.ПрочитатьXML(ЧтениеXML, Тип("СхемаКомпоновкиДанных"));
	ЧтениеXML.Закрыть();
	ЧтениеXML = Неопределено;
	УдалитьФайлы(ПолноеИмяФайла);
	
	Если СхемаКД.НастройкиПоУмолчанию.ДополнительныеСвойства.Свойство("СхемаКомпоновкиДанных") Тогда
		СхемаКД.НастройкиПоУмолчанию.ДополнительныеСвойства.СхемаКомпоновкиДанных = Неопределено;
	КонецЕсли;
	
	Возврат СхемаКД;
	
КонецФункции

Процедура НастройкиКДПоУмолчаниюЗагруженнойСхемы(ОтчетОбъект, ЗагруженнаяСхема, НастройкиКД, НовыеПользовательскиеНастройкиКД) Экспорт
	
	Если Не НастройкиКД.ДополнительныеСвойства.Свойство("ОтчетИнициализирован") Или (НастройкиКД.ДополнительныеСвойства.Свойство("ОтчетИнициализирован")
		И Не НастройкиКД.ДополнительныеСвойства.ОтчетИнициализирован) Тогда
		
		СхемаКД = ОтчетОбъект.СхемаКомпоновкиДанных;
		
		НастройкиКД = СхемаКД.НастройкиПоУмолчанию;
		НастройкиКД.ДополнительныеСвойства.Вставить("СхемаКомпоновкиДанных", ЗагруженнаяСхема);
		НастройкиКД.ДополнительныеСвойства.Вставить("ОтчетИнициализирован",  Истина);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с источником данных варианта отчета.

// Устанавливает параметр "ИсточникДанных" настроек варианта отчета
//
// Параметры:
//  Вариант - СправочникСсылка.ВариантыОтчетов - хранилище настроек варианта отчета.
//
Процедура УстановитьИсточникДанныхВарианта(Вариант) Экспорт
	УниверсальныйОтчет = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Отчеты.УниверсальныйОтчет);
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(Вариант.Метаданные().ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Вариант);
		Блокировка.Заблокировать();
		
		ВариантОбъект = Вариант.ПолучитьОбъект();
		
		НастройкиВарианта = Неопределено;
		Если ВариантОбъект <> Неопределено
			И ВариантОбъект.Отчет = УниверсальныйОтчет Тогда 
			НастройкиВарианта = НастройкиВарианта(ВариантОбъект);
		КонецЕсли;
		
		Если НастройкиВарианта = Неопределено Тогда 
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Вариант);
			Возврат;
		КонецЕсли;
		
		ВариантОбъект.Настройки = Новый ХранилищеЗначения(НастройкиВарианта);
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВариантОбъект);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

// Возвращает настройки варианта отчета с установленным параметром ИсточникДанных.
//
// Параметры:
//  Вариант - СправочникОбъект.ВариантыОтчетов - хранилище настроек варианта отчета.
//
// Возвращаемое значение:
//   НастройкиКомпоновкиДанных, Неопределено - обновленные настройки или Неопределено,
//                                            если обновить не удалось.
//
Функция НастройкиВарианта(Вариант)
	Попытка
		НастройкиВарианта = Вариант.Настройки.Получить();
	Исключение
		// Не удалось десериализовать хранилище значения, например, из-за ссылки на несуществующий тип.
		Возврат Неопределено;
	КонецПопытки;
	
	Если НастройкиВарианта = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыДанных = НастройкиВарианта.ПараметрыДанных.Элементы;
	
	ПараметрыИскомые = Новый Структура(
		"ТипОбъектаМетаданных, ПолноеИмяОбъектаМетаданных, ИмяОбъектаМетаданных, ИсточникДанных");
	Для Каждого Параметр Из ПараметрыИскомые Цикл 
		НайденныйПараметр = ПараметрыДанных.Найти(Параметр.Ключ);
		Если НайденныйПараметр <> Неопределено Тогда 
			ПараметрыИскомые[Параметр.Ключ] = НайденныйПараметр.Значение;
		КонецЕсли;
	КонецЦикла;
	
	// Если в настройках варианта хранится параметр с неактуальным именем - выполнится его актуализация.
	Если ЗначениеЗаполнено(ПараметрыИскомые.ПолноеИмяОбъектаМетаданных) Тогда 
		ПараметрыИскомые.ИмяОбъектаМетаданных = ПараметрыИскомые.ПолноеИмяОбъектаМетаданных;
	КонецЕсли;
	ПараметрыИскомые.Удалить("ПолноеИмяОбъектаМетаданных");
	
	Если Не ЗначениеЗаполнено(ПараметрыИскомые.ИсточникДанных) Тогда 
		ПараметрыИскомые.ИсточникДанных = ИсточникДанных(
			ПараметрыИскомые.ТипОбъектаМетаданных, ПараметрыИскомые.ИмяОбъектаМетаданных);
		Если ПараметрыИскомые.ИсточникДанных = Неопределено Тогда 
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыУстанавливаемые = Новый Структура("ИсточникДанных, ИмяОбъектаМетаданных");
	ЗаполнитьЗначенияСвойств(ПараметрыУстанавливаемые, ПараметрыИскомые);
	
	ИмяОбъекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыИскомые.ИсточникДанных, "Имя");
	Если ИмяОбъекта <> ПараметрыУстанавливаемые.ИмяОбъектаМетаданных Тогда 
		ПараметрыУстанавливаемые.ИмяОбъектаМетаданных = ИмяОбъекта;
	КонецЕсли;
	
	Для Каждого Параметр Из ПараметрыУстанавливаемые Цикл 
		НайденныйПараметр = ПараметрыДанных.Найти(Параметр.Ключ);
		Если НайденныйПараметр = Неопределено Тогда 
			ПараметрДанных = ПараметрыДанных.Добавить();
			ПараметрДанных.Параметр = Новый ПараметрКомпоновкиДанных(Параметр.Ключ);
			ПараметрДанных.Значение = Параметр.Значение;
			ПараметрДанных.Использование = Истина;
			
			Если Параметр.Ключ = "ИмяОбъектаМетаданных"
				И Не ЗначениеЗаполнено(ПараметрДанных.ИдентификаторПользовательскойНастройки) Тогда 
				ПараметрДанных.ИдентификаторПользовательскойНастройки = Новый УникальныйИдентификатор;
				ПараметрДанных.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
			КонецЕсли;
		Иначе
			НастройкиВарианта.ПараметрыДанных.УстановитьЗначениеПараметра(Параметр.Ключ, Параметр.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат НастройкиВарианта;
КонецФункции

// Возвращает источник данных отчета
//
// Параметры:
//  ТипМенеджера - Строка - представление менеджера объекта метаданных,
//                 например, "Справочники" или "РегистрыСведений" и т.д.
//  ИмяОбъекта  - Строка - краткое имя объекта метаданных,
//                например, "Валюты" или "КурсыВалют" и т.д.
//
// Возвращаемое значение:
//   СправочникСсылка.ИдентификаторыОбъектовМетаданных, Неопределено -
//   ссылка на найденный элемент справочника, иначе - Неопределено.
//
Функция ИсточникДанных(ТипМенеджера, ИмяОбъекта)
	ТипОбъекта = ТипОбъектаПоТипуМенеджера(ТипМенеджера);
	ПолноеИмяОбъекта = ТипОбъекта + "." + ИмяОбъекта;
	Если Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта) = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяОбъекта);
КонецФункции

// Возвращает тип объекта метаданных по соответствующему типу менеджера
//
// Параметры:
//  ТипМенеджера - Строка - представление менеджера объекта метаданных,
//                 например, "Справочники" или "РегистрыСведений" и т.д.
//
// Возвращаемое значение:
//   Строка - тип объекта метаданных, например, "Справочник" или "РегистрСведений" и т.д.
//
Функция ТипОбъектаПоТипуМенеджера(ТипМенеджера)
	Типы = Новый Соответствие;
	Типы.Вставить("Справочники", "Справочник");
	Типы.Вставить("Документы", "Документ");
	Типы.Вставить("Обработки", "Обработка");
	Типы.Вставить("ПланыВидовХарактеристик", "ПланВидовХарактеристик");
	Типы.Вставить("РегистрыБухгалтерии", "РегистрБухгалтерии");
	Типы.Вставить("РегистрыНакопления", "РегистрНакопления");
	Типы.Вставить("РегистрыРасчета", "РегистрРасчета");
	Типы.Вставить("РегистрыСведений", "РегистрСведений");
	Типы.Вставить("БизнесПроцессы", "БизнесПроцесс");
	Типы.Вставить("ЖурналыДокументов", "ЖурналДокументов");
	Типы.Вставить("Задачи", "Задача");
	Типы.Вставить("Отчеты", "Отчет");
	Типы.Вставить("Константы", "Константа");
	Типы.Вставить("Перечисления", "Перечисление");
	Типы.Вставить("ПланыВидовРасчета", "ПланВидовРасчета");
	Типы.Вставить("ПланыОбмена", "ПланОбмена");
	Типы.Вставить("ПланыСчетов", "ПланСчетов");
	
	Возврат ?(Типы[ТипМенеджера] = Неопределено, "", Типы[ТипМенеджера]);
КонецФункции

#КонецОбласти

#КонецЕсли